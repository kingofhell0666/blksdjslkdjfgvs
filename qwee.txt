<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kullanıcılar Listesi</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }

        h1 {
            text-align: center;
            margin-top: 20px;
            color: #333;
        }

        #searchInput {
            display: block;
            margin: 10px auto;
            padding: 10px;
            width: 80%;
            max-width: 400px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
        }

        #playerCount, #totalPlayerCount {
            text-align: center;
            font-size: 16px;
            margin-top: 10px;
            color: #555;
        }

        #usersContainer {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 15px;
            padding: 20px;
            justify-items: center;
            margin-top: 20px;
        }

     .user {
    background-color: white;
    border-radius: 10px;
    padding: 15px;
    text-align: center;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    width: 150px; /* Genişliği artırdık */
    transition: transform 0.3s ease;
    cursor: pointer;
    font-size: 14px;
}

        .user:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .user img {
            border-radius: 50%;
            width: 50px;
            height: 50px;
            object-fit: cover;
        }

        .user b {
            display: block;
            margin-top: 10px;
            font-weight: bold;
            color: #333;
        }

        .user i {
            font-size: 12px;
            color: #777;
        }

        .download-btn {
            color: #007bff;
            text-decoration: none;
            font-size: 12px;
            cursor: pointer;
            display: block;
            margin-top: 5px;
        }

        .download-btn:hover {
            text-decoration: underline;
        }

        .filters {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .filters label {
            margin: 0 15px;
            font-size: 14px;
            color: #333;
        }
    </style>
</head>
<body>
    <h1>Kullanıcılar Listesi</h1>

    <div>
        <label>
            <input type="checkbox" id="havefotoCheckbox" onclick="filterUsers()"> Fotoğrafı Olan
        </label>
        <label>
            <input type="checkbox" id="nofotoCheckbox" onclick="filterUsers()"> Fotoğrafı Olmayan
        </label>
    </div>

    <input type="text" id="searchInput" oninput="searchUsers()" placeholder="Kullanıcı Ara...">

    <div id="playerCount">0 kullanıcı</div>
    <div id="totalPlayerCount">Toplam kişi sayısı: 0</div>

    <div id="usersContainer"></div>

    <script>
        const f = (x) => { return document.querySelector(x) }
        const fa = (x) => { return document.querySelectorAll(x) }

        let totalPlayerCount = 0;

        function updatePlayerCount(count) {
            const playerCountElement = f("#playerCount");
            playerCountElement.textContent = `${count} kullanıcı`;
        }

        function updateTotalPlayerCount(count) {
            const totalPlayerCountElement = f("#totalPlayerCount");
            totalPlayerCountElement.textContent = `Toplam kişi sayısı: ${count}`;
        }

        function getRandomColor() {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

function addPlayers(users, roomlink) {
    const usersContainer = f("#usersContainer");
    totalPlayerCount += users.length;
    updateTotalPlayerCount(totalPlayerCount);
    updatePlayerCount(users.length);

    // Rastgele renk seç
    const roomColor = getRandomColor();

    users.forEach(user => {
        const foto = user.foto || "https://gartic.io/static/images/avatar/svg/" + user.avatar + ".svg";
        const uclass = user.foto ? "havefoto" : "nofoto";

        usersContainer.innerHTML += `
            <div class="user flex ${uclass}" style="border-left: 5px solid ${roomColor}">
                <img width="40" src="${foto}" alt="">
                <div>
                    <b>${user.nick}</b><br>
                    <i>${user.pontos} pt</i>&nbsp;&nbsp;
                    <a target="_blank" href="https://gartic.io/${roomlink}">#${roomlink}</a><br>
                    <a target="_blank" href="https://gartic.io/${roomlink}/viewer">#${roomlink} izle</a><br>
                    <span class="download-btn" onclick="openProfile('${user.nick}', '${foto}')">Profili Görüntüle</span>
                </div>
            </div>
        `;
    });
}


        function openProfile(foto) {
            window.open(foto, '_blank'); // Fotoğraf linkini yeni sekmede aç
        }

        function searchUsers() {
            const users = fa(".user");
            const searchInput = f("#searchInput").value.toLowerCase();

            users.forEach(user => {
                const userName = user.querySelector("b").textContent.toLowerCase();
                user.style.display = userName.includes(searchInput) ? "flex" : "none";
            });

            updatePlayerCount(document.querySelectorAll('.user[style="display: flex;"]').length);
        }

        function filterUsers() {
            const users = fa(".user");
            const havefotoCheckbox = f("#havefotoCheckbox");
            const nofotoCheckbox = f("#nofotoCheckbox");

            const isHaveFotoChecked = havefotoCheckbox.checked;
            const isNoFotoChecked = nofotoCheckbox.checked;

            // Eğer hiçbir kutucuk işaretli değilse, hiç kullanıcı göstermemeliyiz
            if (!isHaveFotoChecked && !isNoFotoChecked) {
                users.forEach(user => {
                    user.style.display = "none";  // Hiçbir kullanıcı görünmemeli
                });
            } else {
                // Checkbox'lara göre filtreleme yap
                users.forEach(user => {
                    const havefoto = user.classList.contains("havefoto");
                    const nofoto = user.classList.contains("nofoto");

                    // Eğer işaretli kutucuk varsa, ona göre kullanıcıyı göster
                    if ((isHaveFotoChecked && havefoto) || (isNoFotoChecked && nofoto)) {
                        user.style.display = "flex";
                    } else {
                        user.style.display = "none";
                    }
                });
            }

            // Görüntülenen kullanıcı sayısını güncelle
            updatePlayerCount(document.querySelectorAll('.user[style="display: flex;"]').length);
        }

        function listusers(lang) {
            const usersContainer = f("#usersContainer");
            usersContainer.innerHTML = "";

            fetch(`https://gartic.io/req/list?search=&language[]=${lang}`)
                .then(x => x.json())
                .then(rooms => {
                    let index = 0;

                    function fetchRoom() {
                        if (index >= rooms.length) return;

                        const room = rooms[index];
                        index++;

                        fetch(`https://gartic.io/serverViewer?v3=1&room=${room.code}`)
                            .then(x => x.text())
                            .then(x => {
                                const roomSC = x.split("https://")[1].split(".")[0];
                                let ws = new WebSocket(`wss://${roomSC}.gartic.io/socket.io/?EIO=3&transport=websocket`);

                                ws.onopen = () => {
                                    ws.send('42[12,{"v":20000,"platform":0,"sala":"' + room.id + '"}]')
                                    ws.send('42[46,0]')
                                }

                                ws.onmessage = (msg) => {
                                    if (msg.data.indexOf('42["5"') !== -1) {
                                        addPlayers(JSON.parse('[{"id":' + msg.data.split('[{"id":')[1].split("}]")[0] + "}]"), room.code);
                                        filterUsers();
                                    }
                                }

                                setTimeout(fetchRoom, 2000);
                            })
                            .catch(error => {
                                console.error(`Error fetching room data for ${room.code}:`, error);
                                setTimeout(fetchRoom, 2000);
                            });
                    }

                    fetchRoom();
                })
                .catch(error => console.error('Error fetching room list:', error));
        }

        listusers(8);
    </script>
</body>
</html>
