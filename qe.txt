<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kullanıcı Filtreleme</title>
    <style>
        .user { display: none; } /* Varsayılan olarak kullanıcıları gizleyelim */
        .havefoto { color: green; }
        .nofoto { color: red; }
        .flex { display: flex; }
    </style>
</head>
<body>

    <div>
        <label><input type="checkbox" id="havefotoCheckbox"> Profil fotoğrafı olanlar</label>
        <label><input type="checkbox" id="nofotoCheckbox"> Profil fotoğrafı olmayanlar</label>
    </div>

    <div>
        <p id="totalPlayerCount">Toplam kişi sayısı: 0</p>
        <p id="playerCount">Kullanıcı sayısı: 0</p>
    </div>

    <div id="usersContainer">
        <!-- Kullanıcılar buraya eklenecek -->
    </div>

    <div id="profileContainer" style="display: none;">
        <h3 id="profileTitle"></h3>
        <img id="profileImage" src="" alt="" width="100">
        <p id="profileName"></p>
        <button onclick="closeProfile()">Kapat</button>
    </div>

    <script>
        const f = (x) => { return document.querySelector(x) }
        const fa = (x) => { return document.querySelectorAll(x) }

        let totalPlayerCount = 0;

        function updatePlayerCount(count) {
            const playerCountElement = f("#playerCount");
            playerCountElement.textContent = `${count}`;
        }

        function updateTotalPlayerCount(count) {
            const totalPlayerCountElement = f("#totalPlayerCount");
            totalPlayerCountElement.textContent = `Toplam kişi sayısı: ${count}`;
        }

        function addPlayers(users, roomlink) {
            const usersContainer = f("#usersContainer");
            totalPlayerCount += users.length;
            updateTotalPlayerCount(totalPlayerCount);
            updatePlayerCount(users.length);

            users.forEach(user => {
                const foto = user.foto || "https://gartic.io/static/images/avatar/svg/" + user.avatar + ".svg";
                const uclass = user.foto ? "havefoto" : "nofoto";

                usersContainer.innerHTML += `
                    <div class="user flex ${uclass}">
                        <img width="40" src="${foto}" alt="">
                        <div>
                            <b>${user.nick}</b><br>
                            <i>${user.pontos} pt</i>&nbsp;&nbsp;
                            <a target="_blank" href="https://gartic.io/${roomlink}">#${roomlink}</a><br>
                            <span class="download-btn" onclick="openProfile('${user.nick}', '${foto}')">Profil Aç</span>
                        </div>
                    </div>
                `;
            });
        }

        function openProfile(nick, foto) {
            const profileContainer = f("#profileContainer");
            const profileTitle = f("#profileTitle");
            const profileImage = f("#profileImage");
            const profileName = f("#profileName");

            profileTitle.textContent = `Profile: ${nick}`;
            profileImage.src = foto;
            profileImage.alt = `${nick}'s Profile Photo`;
            profileName.textContent = `Username: ${nick}`;

            profileContainer.style.display = 'flex';
        }

        function closeProfile() {
            const profileContainer = f("#profileContainer");
            profileContainer.style.display = 'none';
        }

        function filterUsers() {
            const users = fa(".user");
            const havefotoCheckbox = f("#havefotoCheckbox");
            const nofotoCheckbox = f("#nofotoCheckbox");

            const isHaveFotoChecked = havefotoCheckbox.checked;
            const isNoFotoChecked = nofotoCheckbox.checked;

            if (!isHaveFotoChecked && !isNoFotoChecked) {
                users.forEach(user => {
                    user.style.display = "none";  // Hiçbir kullanıcı görünmemeli
                });
            } else {
                users.forEach(user => {
                    const havefoto = user.classList.contains("havefoto");
                    const nofoto = user.classList.contains("nofoto");

                    if ((isHaveFotoChecked && havefoto) || (isNoFotoChecked && nofoto)) {
                        user.style.display = "flex";
                    } else {
                        user.style.display = "none";
                    }
                });
            }

            updatePlayerCount(document.querySelectorAll('.user[style="display: flex;"]').length);
        }

        // Veriyi çekerken kullanıcıları ekleyelim
        function listusers(lang) {
            const usersContainer = f("#usersContainer");
            usersContainer.innerHTML = "";

            fetch(`https://gartic.io/req/list?search=&language[]=${lang}`)
                .then(x => x.json())
                .then(rooms => {
                    let index = 0;

                    function fetchRoom() {
                        if (index >= rooms.length) return;

                        const room = rooms[index];
                        index++;

                        fetch(`https://gartic.io/serverViewer?v3=1&room=${room.code}`)
                            .then(x => x.text())
                            .then(x => {
                                const roomSC = x.split("https://")[1].split(".")[0];
                                let ws = new WebSocket(`wss://${roomSC}.gartic.io/socket.io/?EIO=3&transport=websocket`);

                                ws.onopen = () => {
                                    ws.send('42[12,{"v":20000,"platform":0,"sala":"' + room.id + '"}]')
                                    ws.send('42[46,0]')
                                }

                                ws.onmessage = (msg) => {
                                    if (msg.data.indexOf('42["5"') !== -1) {
                                        addPlayers(JSON.parse('[{"id":' + msg.data.split('[{"id":')[1].split("}]")[0] + "}]"), room.code);
                                        filterUsers();
                                    }
                                }

                                // 1 saniye (1000 ms) aralıklarla bir sonraki odanın verilerini çek
                                setTimeout(fetchRoom, 2000);
                            })
                            .catch(error => {
                                console.error(`Error fetching room data for ${room.code}:`, error);
                                // Hata durumunda bile 1 saniye aralık bırak
                                setTimeout(fetchRoom, 2000);
                            });
                    }

                    // İlk odayı almak için başlat
                    fetchRoom();
                })
                .catch(error => console.error('Error fetching room list:', error));
        }

        listusers(8);  // Başlangıç dilini 8 (Türkçe) olarak ayarladık
    </script>
</body>
</html>
