<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Filtreleme ve Arama</title>
    <style>
        .user {
            display: none;
            padding: 10px;
            border: 1px solid #ccc;
            margin: 5px;
            border-radius: 5px;
        }
        .user.flex {
            display: flex;
            align-items: center;
        }
        .user img {
            margin-right: 10px;
        }
        .download-btn, .discord-profile-btn {
            cursor: pointer;
            color: blue;
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <h1>Kullanıcı Listesi</h1>

    <!-- Filtreleme kutucukları -->
    <label>
        <input type="checkbox" id="havefotoCheckbox"> Profil Fotoğrafı Olanlar
    </label>
    <label>
        <input type="checkbox" id="nofotoCheckbox"> Profil Fotoğrafı Olmayanlar
    </label>

    <!-- Arama kutusu -->
    <input type="text" id="searchInput" placeholder="Kullanıcı arayın..." oninput="searchUsers()">

    <div>
        <h3 id="totalPlayerCount">Toplam kişi sayısı: 0</h3>
        <h3 id="playerCount">Görüntülenen kişi sayısı: 0</h3>
    </div>

    <div id="usersContainer"></div>

    <div id="profileContainer" style="display: none; flex-direction: column; align-items: center;">
        <h2 id="profileTitle"></h2>
        <img id="profileImage" src="" alt="" width="100">
        <p id="profileName"></p>
        <button onclick="closeProfile()">Kapat</button>
    </div>

    <script>
        const f = (x) => { return document.querySelector(x) }
        const fa = (x) => { return document.querySelectorAll(x) }

        let totalPlayerCount = 0;

        function updatePlayerCount(count) {
            const playerCountElement = f("#playerCount");
            playerCountElement.textContent = `Görüntülenen kişi sayısı: ${count}`;
        }

        function updateTotalPlayerCount(count) {
            const totalPlayerCountElement = f("#totalPlayerCount");
            totalPlayerCountElement.textContent = `Toplam kişi sayısı: ${count}`;
        }

        function addPlayers(users, roomlink) {
            const usersContainer = f("#usersContainer");
            totalPlayerCount += users.length;
            updateTotalPlayerCount(totalPlayerCount);
            updatePlayerCount(users.length);

            users.forEach(user => {
                const foto = user.foto || "https://gartic.io/static/images/avatar/svg/" + user.avatar + ".svg";
                const uclass = user.foto ? "havefoto" : "nofoto";

                usersContainer.innerHTML += `
                    <div class="user flex ${uclass}">
                        <img width="40" src="${foto}" alt="">
                        <div>
                            <b>${user.nick}</b><br>
                            <i>${user.pontos} pt</i>&nbsp;&nbsp;
                            <a target="_blank" href="https://gartic.io/${roomlink}">#${roomlink}</a><br>
                        </div>
                    </div>
                `;
            });

            filterUsers(); // Filtreyi uygulamak için çağırıyoruz
        }

        function filterUsers() {
            const users = fa(".user");
            const havefotoCheckbox = f("#havefotoCheckbox");
            const nofotoCheckbox = f("#nofotoCheckbox");

            const isHaveFotoChecked = havefotoCheckbox.checked;
            const isNoFotoChecked = nofotoCheckbox.checked;

            // Eğer hiçbir kutucuk işaretli değilse, hiç kullanıcı göstermemeliyiz
            if (!isHaveFotoChecked && !isNoFotoChecked) {
                users.forEach(user => {
                    user.style.display = "none";  // Hiçbir kullanıcı görünmemeli
                });
            } else {
                // Checkbox'lara göre filtreleme yap
                users.forEach(user => {
                    const havefoto = user.classList.contains("havefoto");
                    const nofoto = user.classList.contains("nofoto");

                    // Kullanıcıyı yalnızca işaretli kutucuklara göre göster
                    if ((isHaveFotoChecked && havefoto) || (isNoFotoChecked && nofoto)) {
                        user.style.display = "flex";
                    } else {
                        user.style.display = "none";
                    }
                });
            }

            // Görüntülenen kullanıcı sayısını güncelle
            updatePlayerCount(document.querySelectorAll('.user[style="display: flex;"]').length);
        }

        function searchUsers() {
            const users = fa(".user");
            const searchInput = f("#searchInput").value.toLowerCase();
            const havefotoCheckbox = f("#havefotoCheckbox");
            const nofotoCheckbox = f("#nofotoCheckbox");

            const isHaveFotoChecked = havefotoCheckbox.checked;
            const isNoFotoChecked = nofotoCheckbox.checked;

            users.forEach(user => {
                const userName = user.querySelector("b").textContent.toLowerCase();
                const havefoto = user.classList.contains("havefoto");
                const nofoto = user.classList.contains("nofoto");

                // Eğer hiçbir kutucuk işaretli değilse, kullanıcıyı gizle
                if (!isHaveFotoChecked && !isNoFotoChecked) {
                    user.style.display = "none";  // Hiçbir şey gösterilmesin
                } else {
                    // Kullanıcıyı hem arama hem de kutucuklara göre kontrol et
                    const matchesSearch = userName.includes(searchInput);
                    let matchesFilter = false;

                    // Arama yalnızca işaretli olanlar için yapılmalı
                    if (isHaveFotoChecked && havefoto && matchesSearch) {
                        matchesFilter = true;  // Profil fotoğrafı olan kullanıcıda arama
                    } else if (isNoFotoChecked && nofoto && matchesSearch) {
                        matchesFilter = true;  // Profil fotoğrafı olmayan kullanıcıda arama
                    }

                    // Eğer kullanıcı hem filtreye hem de aramaya uyuyorsa, göster
                    if (matchesFilter) {
                        user.style.display = "flex";
                    } else {
                        user.style.display = "none";
                    }
                }
            });

            // Görüntülenen kullanıcı sayısını güncelle
            updatePlayerCount(document.querySelectorAll('.user[style="display: flex;"]').length);
        }

        function openProfile(nick, foto) {
            const profileContainer = f("#profileContainer");
            const profileTitle = f("#profileTitle");
            const profileImage = f("#profileImage");
            const profileName = f("#profileName");

            profileTitle.textContent = `Profile: ${nick}`;
            profileImage.src = foto;
            profileImage.alt = `${nick}'s Profile Photo`;
            profileName.textContent = `Username: ${nick}`;

            profileContainer.style.display = 'flex';
        }

        function closeProfile() {
            const profileContainer = f("#profileContainer");
            profileContainer.style.display = 'none';
        }

        // Kullanıcıları listelemek için
        function listusers(lang) {
            const usersContainer = f("#usersContainer");
            usersContainer.innerHTML = "";

            fetch(`https://gartic.io/req/list?search=&language[]=${lang}`)
                .then(x => x.json())
                .then(rooms => {
                    let index = 0;

                    function fetchRoom() {
                        if (index >= rooms.length) return;

                        const room = rooms[index];
                        index++;

                        fetch(`https://gartic.io/serverViewer?v3=1&room=${room.code}`)
                            .then(x => x.text())
                            .then(x => {
                                const roomSC = x.split("https://")[1].split(".")[0];
                                let ws = new WebSocket(`wss://${roomSC}.gartic.io/socket.io/?EIO=3&transport=websocket`);

                                ws.onopen = () => {
                                    ws.send('42[12,{"v":20000,"platform":0,"sala":"' + room.id + '"}]')
                                    ws.send('42[46,0]')
                                }

                                ws.onmessage = (msg) => {
                                    if (msg.data.indexOf('42["5"') !== -1) {
                                        addPlayers(JSON.parse('[{"id":' + msg.data.split('[{"id":')[1].split("}]")[0] + "}]"), room.code);
                                    }
                                }

                                setTimeout(fetchRoom, 2000);
                            })
                            .catch(error => {
                                console.error(`Error fetching room data for ${room.code}:`, error);
                                setTimeout(fetchRoom, 2000);
                            });
                    }

                    fetchRoom();
                })
                .catch(error => console.error('Error fetching room list:', error));
        }

        listusers(8);  // Dili 8 (Türkçe) olarak belirledim
    </script>
</body>
</html>
